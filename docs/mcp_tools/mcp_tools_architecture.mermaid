%%{init: {'theme':'dark', 'themeVariables': { 'primaryColor': '#1f2937', 'primaryTextColor': '#f3f4f6', 'primaryBorderColor': '#4b5563', 'lineColor': '#6b7280', 'secondaryColor': '#374151', 'tertiaryColor': '#4b5563', 'background': '#111827', 'mainBkg': '#1f2937', 'secondBkg': '#374151'}}}%%

graph TB
    %% Clients
    subgraph Clients ["MCP Clients"]
        Claude["Claude<br/>Assistant"]
        Agent1["Agent 1<br/>(Backend Dev)"]
        Agent2["Agent 2<br/>(Frontend Dev)"]
        Agent3["Agent 3<br/>(DevOps)"]
    end
    
    %% MCP Server
    subgraph MCP ["Marcus MCP Server"]
        Server["MCP Server<br/>(marcus_mcp_server.py)"]
        
        subgraph Tools ["MCP Tools"]
            subgraph AgentMgmt ["Agent Management"]
                RegisterAgent["register_agent"]
                GetAgentStatus["get_agent_status"]
                ListAgents["list_registered_agents"]
            end
            
            subgraph TaskMgmt ["Task Management"]
                RequestTask["request_next_task"]
                ReportProgress["report_task_progress"]
                ReportBlocker["report_blocker"]
            end
            
            subgraph ProjectMon ["Project Monitoring"]
                GetProjectStatus["get_project_status"]
            end
            
            subgraph SystemHealth ["System Health"]
                Ping["ping"]
                CheckHealth["check_assignment_health"]
            end
            
            subgraph NLP ["Natural Language"]
                CreateProject["create_project"]
                AddFeature["add_feature"]
            end
        end
    end
    
    %% Core Systems
    subgraph Core ["Core Systems"]
        State["Marcus State<br/>(In-Memory)"]
        Persistence["Assignment<br/>Persistence<br/>(JSON)"]
        Monitor["Assignment<br/>Monitor"]
        AIEngine["AI Engine<br/>(Anthropic)"]
    end
    
    %% Integrations
    subgraph Integrations ["Integrations"]
        KanbanClient["Kanban Client<br/>(Planka/Linear/GitHub)"]
        NLPTools["NLP Tools<br/>(mcp_natural_language_tools.py)"]
    end
    
    %% External Systems
    subgraph External ["External Systems"]
        KanbanBoard["Kanban Board<br/>(Planka)"]
        Database[(Task<br/>Database)]
    end
    
    %% Connections
    Claude --> Server
    Agent1 --> Server
    Agent2 --> Server
    Agent3 --> Server
    
    Server --> RegisterAgent
    Server --> GetAgentStatus
    Server --> ListAgents
    Server --> RequestTask
    Server --> ReportProgress
    Server --> ReportBlocker
    Server --> GetProjectStatus
    Server --> Ping
    Server --> CheckHealth
    Server --> CreateProject
    Server --> AddFeature
    
    RegisterAgent --> State
    GetAgentStatus --> State
    ListAgents --> State
    RequestTask --> State
    RequestTask --> AIEngine
    ReportProgress --> State
    ReportProgress --> KanbanClient
    ReportBlocker --> State
    ReportBlocker --> AIEngine
    GetProjectStatus --> State
    GetProjectStatus --> KanbanClient
    
    CreateProject --> NLPTools
    AddFeature --> NLPTools
    NLPTools --> AIEngine
    NLPTools --> KanbanClient
    
    State --> Persistence
    State --> Monitor
    
    KanbanClient --> KanbanBoard
    KanbanBoard --> Database
    
    %% Styling
    classDef client fill:#3b82f6,stroke:#2563eb,stroke-width:2px,color:#fff
    classDef tool fill:#10b981,stroke:#059669,stroke-width:2px,color:#fff
    classDef core fill:#8b5cf6,stroke:#7c3aed,stroke-width:2px,color:#fff
    classDef integration fill:#f59e0b,stroke:#d97706,stroke-width:2px,color:#fff
    classDef external fill:#ef4444,stroke:#dc2626,stroke-width:2px,color:#fff
    
    class Claude,Agent1,Agent2,Agent3 client
    class RegisterAgent,GetAgentStatus,ListAgents,RequestTask,ReportProgress,ReportBlocker,GetProjectStatus,Ping,CheckHealth,CreateProject,AddFeature tool
    class State,Persistence,Monitor,AIEngine core
    class KanbanClient,NLPTools integration
    class KanbanBoard,Database external