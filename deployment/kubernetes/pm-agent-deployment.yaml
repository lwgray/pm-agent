apiVersion: v1
kind: Namespace
metadata:
  name: pm-agent
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pm-agent-config
  namespace: pm-agent
data:
  settings.json: |
    {
      "server": {
        "host": "0.0.0.0",
        "port": 8000,
        "workers": 1,
        "max_connections": 100,
        "cors_origins": ["*"]
      },
      "redis": {
        "url": "redis://redis-service:6379",
        "pool_size": 10,
        "ttl": 300
      },
      "database": {
        "url": "postgresql://pmuser:pmpass@postgres-service:5432/pmagent",
        "pool_size": 20,
        "max_overflow": 10
      },
      "kanban": {
        "min_connections": 2,
        "max_connections": 10,
        "idle_timeout": 300
      },
      "monitoring": {
        "interval": 60,
        "metrics_port": 9090
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pm-agent-server
  namespace: pm-agent
  labels:
    app: pm-agent
    component: server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: pm-agent
      component: server
  template:
    metadata:
      labels:
        app: pm-agent
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: pm-agent
        image: pm-agent:latest
        imagePullPolicy: Always
        command: ["python", "-m", "pm_agent.server.scaled_server"]
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: PM_AGENT_CONFIG
          value: /etc/pm-agent/settings.json
        - name: SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: REDIS_URL
          value: redis://redis-service:6379
        - name: DATABASE_URL
          value: postgresql://pmuser:pmpass@postgres-service:5432/pmagent
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config
          mountPath: /etc/pm-agent
      volumes:
      - name: config
        configMap:
          name: pm-agent-config
---
apiVersion: v1
kind: Service
metadata:
  name: pm-agent-service
  namespace: pm-agent
  labels:
    app: pm-agent
    component: server
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: pm-agent
    component: server
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pm-agent-hpa
  namespace: pm-agent
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pm-agent-server
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: pm_agent_active_connections
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pm-agent-ingress
  namespace: pm-agent
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "pm-agent-service"
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "100"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "60"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - pm-agent.example.com
    secretName: pm-agent-tls
  rules:
  - host: pm-agent.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pm-agent-service
            port:
              number: 8000
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: pm-agent
spec:
  serviceName: redis-service
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args:
        - --cluster-enabled yes
        - --cluster-config-file /data/nodes.conf
        - --cluster-node-timeout 5000
        - --appendonly yes
        - --maxmemory 512mb
        - --maxmemory-policy allkeys-lru
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: gossip
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: pm-agent
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 16379
    targetPort: 16379
    name: gossip
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: pm-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: pmagent
        - name: POSTGRES_USER
          value: pmuser
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: pm-agent
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: pm-agent
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: pm-agent
type: Opaque
data:
  password: cG1wYXNzCg==  # Base64 encoded "pmpass"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init
  namespace: pm-agent
spec:
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: busybox
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done;']
      containers:
      - name: postgres-init
        image: postgres:15-alpine
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        command:
        - psql
        - -h
        - postgres-service
        - -U
        - pmuser
        - -d
        - pmagent
        - -c
        - |
          CREATE TABLE IF NOT EXISTS agents (
            id VARCHAR PRIMARY KEY,
            name VARCHAR NOT NULL,
            capabilities JSONB DEFAULT '{}',
            status VARCHAR DEFAULT 'idle',
            current_task_id VARCHAR,
            last_heartbeat TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          CREATE INDEX IF NOT EXISTS idx_agent_status ON agents(status);
          CREATE INDEX IF NOT EXISTS idx_agent_heartbeat ON agents(last_heartbeat);
          
          CREATE TABLE IF NOT EXISTS tasks (
            id VARCHAR PRIMARY KEY,
            title VARCHAR NOT NULL,
            description TEXT,
            status VARCHAR DEFAULT 'pending',
            priority INTEGER DEFAULT 0,
            assigned_agent_id VARCHAR,
            progress INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            completed_at TIMESTAMP,
            metadata JSONB DEFAULT '{}'
          );
          
          CREATE INDEX IF NOT EXISTS idx_task_status ON tasks(status);
          CREATE INDEX IF NOT EXISTS idx_task_agent ON tasks(assigned_agent_id);
          CREATE INDEX IF NOT EXISTS idx_task_priority ON tasks(priority);
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: pm-agent-monitor
  namespace: pm-agent
  labels:
    app: pm-agent
spec:
  selector:
    matchLabels:
      app: pm-agent
      component: server
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics