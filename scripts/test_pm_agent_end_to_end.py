#!/usr/bin/env python3
"""
End-to-end test of PM Agent with worker simulation
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

# Set environment variables
os.environ['PLANKA_BASE_URL'] = 'http://localhost:3333'
os.environ['PLANKA_AGENT_EMAIL'] = 'demo@demo.demo'
os.environ['PLANKA_AGENT_PASSWORD'] = 'demo'
os.environ['ANTHROPIC_API_KEY'] = os.environ.get('ANTHROPIC_API_KEY', 'test-key')

# Add project root to path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Configuration
PROJECT_ID = "1533678301472621705"
BOARD_ID = "1533859887128249584"


async def test_pm_agent_workflow():
    """Test complete PM Agent workflow"""
    
    print("üöÄ PM Agent End-to-End Test")
    print("=" * 60)
    print(f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Project ID: {PROJECT_ID}")
    print(f"Board ID: {BOARD_ID}")
    
    # Connect to kanban-mcp
    server_params = StdioServerParameters(
        command="node",
        args=["/Users/lwgray/dev/kanban-mcp/dist/index.js"],
        env=os.environ.copy()
    )
    
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            print("\n‚úÖ Connected to kanban-mcp")
            
            # 1. Simulate PM Agent checking project status
            print("\nüìä PM Agent: Checking project status...")
            
            summary_result = await session.call_tool(
                "mcp_kanban_project_board_manager",
                {
                    "action": "get_board_summary",
                    "boardId": BOARD_ID,
                    "includeTaskDetails": True
                }
            )
            
            summary = json.loads(summary_result.content[0].text)
            
            total_cards = sum(len(lst.get('cards', [])) for lst in summary.get('lists', []))
            print(f"\nCurrent Status:")
            print(f"  Lists: {len(summary.get('lists', []))}")
            print(f"  Total Cards: {total_cards}")
            
            # Count cards by list
            cards_by_list = {}
            for lst in summary.get('lists', []):
                list_name = lst['name']
                cards_by_list[list_name] = len(lst.get('cards', []))
            
            print("\nCards by List:")
            for list_name, count in cards_by_list.items():
                print(f"  - {list_name}: {count} cards")
            
            # 2. Simulate Worker Agent Registration
            print("\nü§ñ Simulating Worker Agent Registration...")
            
            worker_agents = [
                {
                    "id": "frontend-worker-1",
                    "name": "Frontend Developer Agent",
                    "capabilities": ["React", "TypeScript", "CSS", "Testing"]
                },
                {
                    "id": "backend-worker-1", 
                    "name": "Backend Developer Agent",
                    "capabilities": ["Node.js", "API", "Database", "Authentication"]
                }
            ]
            
            for agent in worker_agents:
                print(f"  ‚úÖ Registered: {agent['name']}")
                print(f"     Capabilities: {', '.join(agent['capabilities'])}")
            
            # 3. Worker agents request tasks
            print("\nüìã Workers Requesting Tasks...")
            
            # Find tasks in "In Progress" list
            in_progress_cards = []
            for lst in summary.get('lists', []):
                if lst['name'] == 'In Progress':
                    in_progress_cards = lst.get('cards', [])
                    break
            
            if in_progress_cards:
                print(f"\nFound {len(in_progress_cards)} cards in progress:")
                
                for idx, card in enumerate(in_progress_cards[:2]):  # Simulate 2 workers
                    worker = worker_agents[idx % len(worker_agents)]
                    print(f"\n  ü§ñ {worker['name']} working on:")
                    print(f"     Card: {card['name']}")
                    print(f"     ID: {card['id']}")
                    
                    # Get card details
                    card_result = await session.call_tool(
                        "mcp_kanban_card_manager",
                        {
                            "action": "get_details",
                            "cardId": card['id']
                        }
                    )
                    
                    card_details = json.loads(card_result.content[0].text)
                    tasks = card_details.get('tasks', [])
                    
                    if tasks:
                        incomplete_tasks = [t for t in tasks if not t.get('isCompleted')]
                        print(f"     Tasks: {len(tasks)} total, {len(incomplete_tasks)} incomplete")
                        
                        # Simulate completing a task
                        if incomplete_tasks:
                            task_to_complete = incomplete_tasks[0]
                            print(f"     üìù Working on: {task_to_complete['name']}")
                            
                            # Add progress comment
                            await session.call_tool(
                                "mcp_kanban_comment_manager",
                                {
                                    "action": "create",
                                    "cardId": card['id'],
                                    "text": f"{worker['name']} started working on: {task_to_complete['name']}"
                                }
                            )
                            
                            # Complete the task
                            await session.call_tool(
                                "mcp_kanban_task_manager",
                                {
                                    "action": "complete_task",
                                    "id": task_to_complete['id']
                                }
                            )
                            
                            print(f"     ‚úÖ Task completed!")
                            
                            # Add completion comment
                            await session.call_tool(
                                "mcp_kanban_comment_manager",
                                {
                                    "action": "create",
                                    "cardId": card['id'],
                                    "text": f"{worker['name']} completed: {task_to_complete['name']}"
                                }
                            )
            
            # 4. PM Agent monitors progress
            print("\nüìä PM Agent: Monitoring Progress...")
            
            # Start stopwatch on a card
            if in_progress_cards:
                first_card = in_progress_cards[0]
                try:
                    await session.call_tool(
                        "mcp_kanban_stopwatch",
                        {
                            "action": "start",
                            "id": first_card['id']
                        }
                    )
                    print(f"  ‚è±Ô∏è  Started time tracking on: {first_card['name']}")
                except:
                    print(f"  ‚è±Ô∏è  Time tracking already active on: {first_card['name']}")
            
            # 5. Create a new high-priority task
            print("\nüö® PM Agent: Creating High-Priority Task...")
            
            # Find backlog list
            backlog_list_id = None
            for lst in summary.get('lists', []):
                if lst['name'] == 'Backlog':
                    backlog_list_id = lst['id']
                    break
            
            if backlog_list_id:
                # Create urgent card
                urgent_card_result = await session.call_tool(
                    "mcp_kanban_card_manager",
                    {
                        "action": "create_with_tasks",
                        "listId": backlog_list_id,
                        "name": "üö® URGENT: Security Audit Required",
                        "description": "Critical security audit needed before production deployment",
                        "position": 1,
                        "tasks": [
                            "Review authentication implementation",
                            "Check for SQL injection vulnerabilities",
                            "Audit API rate limiting",
                            "Review environment variable handling",
                            "Test CORS configuration"
                        ],
                        "comment": "PM Agent: This is a high-priority task that blocks production deployment"
                    }
                )
                
                urgent_card = json.loads(urgent_card_result.content[0].text)
                # Handle different response formats
                if isinstance(urgent_card, dict):
                    card_name = urgent_card.get('name', 'üö® URGENT: Security Audit Required')
                    card_id = urgent_card.get('id', 'unknown')
                else:
                    card_name = 'üö® URGENT: Security Audit Required'
                    card_id = 'created'
                
                print(f"  ‚úÖ Created urgent card: {card_name}")
                print(f"     ID: {card_id}")
                
                # Add urgent label if available
                if 'Bug' in summary.get('labels', {}):
                    bug_label_id = None
                    # Find bug label
                    labels_result = await session.call_tool(
                        "mcp_kanban_label_manager",
                        {
                            "action": "get_all",
                            "boardId": BOARD_ID
                        }
                    )
                    labels = json.loads(labels_result.content[0].text)
                    for label in labels:
                        if label['name'] == 'Bug':
                            bug_label_id = label['id']
                            break
                    
                    if bug_label_id and isinstance(urgent_card, dict) and 'id' in urgent_card:
                        try:
                            await session.call_tool(
                                "mcp_kanban_label_manager",
                                {
                                    "action": "add_to_card",
                                    "cardId": urgent_card['id'],
                                    "labelId": bug_label_id
                                }
                            )
                            print("     üè∑Ô∏è  Added 'Bug' label")
                        except:
                            print("     ‚ö†Ô∏è  Could not add label")
            
            # 6. Final Summary
            print("\nüìä Final Test Summary")
            print("=" * 60)
            
            # Get updated summary
            final_summary_result = await session.call_tool(
                "mcp_kanban_project_board_manager",
                {
                    "action": "get_board_summary",
                    "boardId": BOARD_ID,
                    "includeTaskDetails": False
                }
            )
            
            final_summary = json.loads(final_summary_result.content[0].text)
            
            print("\nTest Results:")
            print("  ‚úÖ Connected to kanban-mcp successfully")
            print("  ‚úÖ Retrieved board status")
            print("  ‚úÖ Simulated worker agent registration")
            print("  ‚úÖ Workers requested and worked on tasks")
            print("  ‚úÖ Completed tasks and added comments")
            print("  ‚úÖ Started time tracking")
            print("  ‚úÖ Created high-priority task")
            
            print("\nBoard Statistics:")
            stats = final_summary.get('stats', {})
            for key, value in stats.items():
                print(f"  - {key}: {value}")
            
            print("\nüéâ PM Agent End-to-End Test Completed Successfully!")
            print("\nThe PM Agent can:")
            print("  - Monitor project status")
            print("  - Coordinate with worker agents")
            print("  - Track task progress")
            print("  - Create and prioritize new tasks")
            print("  - Provide real-time updates via comments")
            print("  - Track time spent on tasks")
            
            return True


if __name__ == "__main__":
    success = asyncio.run(test_pm_agent_workflow())
    sys.exit(0 if success else 1)